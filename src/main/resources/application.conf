akka {
	extensions = [
		"org.rejna.solver.PerfCounter$",
		"org.rejna.solver.store.Store$",
		"org.rejna.solver.cache.Cache$",
		"org.rejna.solver.Cluster$"]
	
    # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
     
    # Log level used by the configured loggers (see "event-handlers") as soon
    # as they have been started; before that, see "stdout-loglevel"
    # Options: ERROR, WARNING, INFO, DEBUG
    loglevel = INFO
     
    # Log level for the very basic logger activated during AkkaApplication startup
    # Options: ERROR, WARNING, INFO, DEBUG
    stdout-loglevel = INFO
     
	actor {
		provider = "akka.remote.RemoteActorRefProvider"
		serialize-messages = on
		# debug {
		#	lifecycle = on
		#	receive = on
		#	autoreceive = off
        #    log-sent-messages = off
        #    log-received-messages = off
        #    event-stream = off
        #    log-remote-lifecycle-events = off 
		#}
		serializers {
			sbinary = "org.rejna.solver.serializer.SBSerializer"
			java = "akka.serialization.JavaSerializer"
			proto = "akka.remote.serialization.ProtobufSerializer"
			# debug = "org.rejna.solver.serializer.DebugSerializer"
		}
		serialization-bindings {
			"org.rejna.solver.serializer.SolverMessage" = sbinary
			"com.google.protobuf.Message" = proto
			# "akka.remote.RemoteServerError" = debug
			"java.lang.Object" = java
		}
	}
	remote {
		transport = "akka.remote.netty.NettyRemoteTransport"
	}
}


worker-dispatcher {
	type = Dispatcher
	executor = org.rejna.solver.LifoThreadPoolExecutor

	# Keep alive time for threads
	keep-alive-time = 60s
	 
	# Min number of threads to cap factor-based core number to
	core-pool-size-min = 8
	 
	# The core pool size factor is used to determine thread pool core size
	# using the following formula: ceil(available processors * factor).
	# Resulting size is then bounded by the core-pool-size-min and
	# core-pool-size-max values.
	core-pool-size-factor = 2.0
	 
	# Max number of threads to cap factor-based number to
	core-pool-size-max = 16
	 
	# Minimum number of threads to cap factor-based max number to
	# (if using a bounded task queue)
	max-pool-size-min = 8
	 
	# Max no of threads (if using a bounded task queue) is determined by
	# calculating: ceil(available processors * factor)
	max-pool-size-factor = 2.0
	 
	# Max number of threads to cap factor-based max number to
	# (if using a bounded task queue)
	max-pool-size-max = 16
	 
	# Specifies the bounded capacity of the task queue (< 1 == unbounded)
	task-queue-size = -1
	 
	# Specifies which type of task queue will be used, can be "array" or
	# "linked" (default)
	task-queue-type = "linked"
	 
	# Allow core threads to time out
	allow-core-timeout = on
}

perf-counter {
	show-freq = 10000
}

slave {
	akka.remote.netty {
		hostname = "192.168.10.22"
		port = 2552
	}
}

standalone {
	computation {
		node.class = org.rejna.solver.mancala.Game
		value.class = org.rejna.solver.mancala.GameStat
	}

	cache {
		dispatcher = "akka.actor.default-dispatcher"
		number-of-cache = 4
		node {
			cache-class = org.rejna.solver.cache.JDBMCache
			class = ${standalone.computation.node.class}
			file = "data/mycache"
			collection = mycollection
		}
		value {
			cache-class = org.rejna.solver.cache.GuavaCache
			class = ${standalone.computation.value.class}
		}
	}
	
	store {
		dispatcher = "akka.actor.default-dispatcher"
		store-class = org.rejna.solver.store.FileStoreActor
		class = ${standalone.computation.value.class}
		filename = "data/mystore"
		children-id-size = 3
	}
	cluster {
		node.class = ${standalone.computation.node.class}
		value.class = ${standalone.computation.value.class}
	}
}

master = ${standalone}
master = {
	akka.remote.netty {
		hostname = "192.168.1.2"
		port = 2552
	}
	
	cluster {
		sync-frequency = 10000
		slaves = [
			"akka://solver@"${slave.akka.remote.netty.hostname}":"${slave.akka.remote.netty.port}"/user/manager"
			]
	}
}